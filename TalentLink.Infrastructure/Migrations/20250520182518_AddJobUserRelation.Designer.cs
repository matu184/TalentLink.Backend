// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TalentLink.Infrastructure.Persistence;

#nullable disable

namespace TalentLink.Infrastructure.Migrations
{
    [DbContext(typeof(TalentLinkDbContext))]
    [Migration("20250520182518_AddJobUserRelation")]
    partial class AddJobUserRelation
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.4");

            modelBuilder.Entity("TalentLink.Domain.Entities.Job", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<int>("Category")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsBoosted")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("PricePerHour")
                        .HasColumnType("TEXT");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.ToTable("Jobs");
                });

            modelBuilder.Entity("TalentLink.Domain.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Role")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("TalentLink.Domain.Entities.VerifiedStudent", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ParentId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("StudentId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.ToTable("VerifiedStudents");
                });

            modelBuilder.Entity("TalentLink.Domain.Entities.Parent", b =>
                {
                    b.HasBaseType("TalentLink.Domain.Entities.User");

                    b.ToTable("Parents", (string)null);
                });

            modelBuilder.Entity("TalentLink.Domain.Entities.Senior", b =>
                {
                    b.HasBaseType("TalentLink.Domain.Entities.User");

                    b.ToTable("Seniors", (string)null);
                });

            modelBuilder.Entity("TalentLink.Domain.Entities.Student", b =>
                {
                    b.HasBaseType("TalentLink.Domain.Entities.User");

                    b.Property<Guid?>("VerifiedByParentId")
                        .HasColumnType("TEXT");

                    b.ToTable("Students", (string)null);
                });

            modelBuilder.Entity("TalentLink.Domain.Entities.Job", b =>
                {
                    b.HasOne("TalentLink.Domain.Entities.User", "CreatedBy")
                        .WithMany("CreatedJobs")
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreatedBy");
                });

            modelBuilder.Entity("TalentLink.Domain.Entities.VerifiedStudent", b =>
                {
                    b.HasOne("TalentLink.Domain.Entities.Parent", "Parent")
                        .WithMany("VerifiedStudents")
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("TalentLink.Domain.Entities.Parent", b =>
                {
                    b.HasOne("TalentLink.Domain.Entities.User", null)
                        .WithOne()
                        .HasForeignKey("TalentLink.Domain.Entities.Parent", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TalentLink.Domain.Entities.Senior", b =>
                {
                    b.HasOne("TalentLink.Domain.Entities.User", null)
                        .WithOne()
                        .HasForeignKey("TalentLink.Domain.Entities.Senior", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TalentLink.Domain.Entities.Student", b =>
                {
                    b.HasOne("TalentLink.Domain.Entities.User", null)
                        .WithOne()
                        .HasForeignKey("TalentLink.Domain.Entities.Student", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TalentLink.Domain.Entities.User", b =>
                {
                    b.Navigation("CreatedJobs");
                });

            modelBuilder.Entity("TalentLink.Domain.Entities.Parent", b =>
                {
                    b.Navigation("VerifiedStudents");
                });
#pragma warning restore 612, 618
        }
    }
}
